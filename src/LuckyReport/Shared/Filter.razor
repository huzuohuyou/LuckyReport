@using LuckyReport.Helpers
@inject LuckyReportHelper LuckyReportHelper
@using System.Text.Json;
    @if (null != filters)
    {
        <Form @ref="_form" Model="formData" Name="advanced_search" Class="ant-advanced-search-form">
            <Row Gutter="24">
                @foreach (var item in filters)
                {
                    switch (item.Type)
                    {
                        case FilterType._0:
                            <DatePickerFilter Title="@item.Title" Field="@item.Field"></DatePickerFilter>
                            break;
                        case FilterType._1:
                            <SelectFilter Title="@item.Title" Field="@item.Field"></SelectFilter>
                            break;
                        case FilterType._2:
                            <InputFilter Title="@item.Title" Field="@item.Field"></InputFilter>
                            break;
                    }
                }
            </Row>
            <Row>
                <GridCol Span="24" Style="text-align:right;">
                    <Button Type="primary" HtmlType="submit">Search</Button>
                    <Button Style="margin: 0 8px;" OnClick="()=>{_form?.Reset();}">Clear</Button>
                    
                </GridCol>
            </Row>
        </Form>
    }
<style>
    [data-theme='compact'] .ant-advanced-search-form,
    .ant-advanced-search-form {
        padding: 24px;
        background: #fbfbfb;
        border: 1px solid #d9d9d9;
        border-radius: 2px;
    }

    [data-theme='compact'] .ant-advanced-search-form .ant-form-item,
    .ant-advanced-search-form .ant-form-item {
        display: flex;
    }

    [data-theme='compact'] .ant-advanced-search-form .ant-form-item-control-wrapper,
    .ant-advanced-search-form .ant-form-item-control-wrapper {
        flex: 1;
    }
</style>   
    
@code {
    [Parameter]
    public string Title { get; set; } = "Set By Child";
    private string _headingFontStyle = "italic";
    [Parameter]
    public int ReportId { get; set; }

    private IEnumerable<LuckyReport.Filter> filters;
    //protected override async Task OnInitializedAsync()
    //{
    //    var report = await LuckyReportHelper.SwaggerClient.Reports2Async(ReportId);
    //     filters = await LuckyReportHelper.SwaggerClient.GetDataSourceFiltersAsync(report.DataSourceId);
    //}

    protected override async Task OnParametersSetAsync()
    {
        var report = await LuckyReportHelper.SwaggerClient.Reports2Async(ReportId);
        filters = await LuckyReportHelper.SwaggerClient.GetDataSourceFiltersAsync(report.DataSourceId);
    }

    bool _expand = false;
    AntDesign.Internal.IForm _form;
    Dictionary<string, FormValue> formData = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        for (var i = 0; i < 10; i++)
        {
            formData.Add($"field-{i}", new FormValue());
        }
    }

    class FormValue
    {
        public string Value { get; set; }
    }

}