@using LuckyReport.Helpers
@inject LuckyReportHelper LuckyReportHelper
<div>
    @if (null != filters)
    {
        @foreach (var item in filters)
        {
            switch (item.Type)
            {
                case FilterType._0:
                    <DatePickerFilter Title="@item.Title" Field="@item.Field"></DatePickerFilter>
                    break;
                case FilterType._1:
                    <SelectFilter Title="@item.Title" Field="@item.Field"></SelectFilter>
                    break;
                case FilterType._2:
                    <InputFilter Title="@item.Title" Field="@item.Field"></InputFilter>
                    break;
            }
        }
    }
    
    <Button Type="@ButtonType.Primary" Icon="@IconType.Outline.Search">Search</Button>
    <Button>重置</Button>
</div>
@code {
    [Parameter]
    public string Title { get; set; } = "Set By Child";
    private string _headingFontStyle = "italic";
    [Parameter]
    public int ReportId { get; set; }

    private IEnumerable<LuckyReport.Filter> filters;
    //protected override async Task OnInitializedAsync()
    //{
    //    var report = await LuckyReportHelper.SwaggerClient.Reports2Async(ReportId);
    //     filters = await LuckyReportHelper.SwaggerClient.GetDataSourceFiltersAsync(report.DataSourceId);
    //}

    protected override async Task OnParametersSetAsync()
    {
        var report = await LuckyReportHelper.SwaggerClient.Reports2Async(ReportId);
        filters = await LuckyReportHelper.SwaggerClient.GetDataSourceFiltersAsync(report.DataSourceId);
    }

}