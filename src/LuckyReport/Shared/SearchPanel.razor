@using LuckyReport.Helpers
@inject LuckyReportHelper LuckyReportHelper
@inject IJSRuntime Js
@using System.Text.Json;
@if (null != _filters)
{
    <Form @ref="_form" Model="formData" Name="advanced_search" >
        <Row Gutter="24">
            @foreach (var item in _filters)
            {
                switch (item.Type)
                {
                    case FilterType._0:
                        <DatePickerSearchItem Parent="item" ></DatePickerSearchItem>
                        break;
                    case FilterType._1:
                        <SelectSearchItem Title="@item.Title" Field="@item.Field"></SelectSearchItem>
                        break;
                    case FilterType._2:
                        <InputSearchItem Title="@item.Title" Field="@item.Field"></InputSearchItem>
                        break;
                }
            }
        </Row>
        <Row>
            <GridCol Span="24" Style="text-align:right;">
                <Button Type="@ButtonType.Primary" HtmlType="submit" OnClick="Search">  Search</Button>
                <Button Style="margin: 0 8px;" OnClick="()=>{_form?.Reset();}">Clear</Button>
                <Button Type="@ButtonType.Primary" @onclick="Download">下载</Button>
                <Button Type="@ButtonType.Primary" @onclick="Print">打印</Button>
            </GridCol>
        </Row>
    </Form>
}


@code {
    [Parameter]
    public string Title { get; set; } = "Set By Child";
    private string _headingFontStyle = "italic";
    [Parameter]
    public int ReportId { get; set; }

    
    private IEnumerable<LuckyReport.Filter> _filters;

    protected override async Task OnParametersSetAsync()
    {
        var report = await LuckyReportHelper.SwaggerClient.Reports2Async(ReportId);
        _filters = await LuckyReportHelper.SwaggerClient.GetDataSourceFiltersAsync(report.DataSourceId);
    }

    bool _expand = false;
    AntDesign.Internal.IForm _form;
    Dictionary<string, FormValue> formData = new();
    private void MyEvent(DateTime?[] value)
    {
        Console.WriteLine("Got the ChildEvents");
    }
    protected override void OnInitialized()
    {
        base.OnInitialized();

        for (var i = 0; i < 10; i++)
        {
            formData.Add($"field-{i}", new FormValue());
        }
    }
    private async Task Search()
    {
        var id = Guid.NewGuid().ToString();
        await LuckyReportHelper.SwaggerClient.CachesAsync(id, _filters);
        await Js.InvokeAsync<string>("luckyLoad.printDoc");
    }
    class FormValue
    {
        public string Value { get; set; }
    }
    private async Task<bool> Print()
    {
        await Js.InvokeAsync<string>("luckyLoad.printDoc");
        return true;
    }
    private async Task<bool> Download()
    {
        //var doc = await Js.InvokeAsync<string>("luckyLoad.getDoc");
        var url = await LuckyReportHelper.SwaggerClient.ExcelAsync(ReportId);
        var fileName = "report.xls";
        //Console.WriteLine(url);
        await Js.InvokeVoidAsync("triggerFileDownload", fileName, url);
        return true;
    }
}