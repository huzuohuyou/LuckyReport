@page "/reports"
@inject NavigationManager Navigation

@using System.Text.Json

<Modal Title="@("BasicModal")"
       Visible="@_visible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel">
    <Form Loading="loading" Model="@model"
          LabelColSpan="8"
          WrapperColSpan="16"
          OnFinish="OnFinish"
          OnFinishFailed="OnFinishFailed"
          @ref="@_form">
        <FormItem Label="Name">
            <Input @bind-Value="@context.Title" />
        </FormItem>
        
    </Form>
</Modal>

<Card>
    <Button Type="primary" OnClick="@ShowModal">
        新建
    </Button>
</Card>
<Card Style="height: 700px">
    <Table @ref="table"
           TItem="Report"
           DataSource="@reports"
           Total="_total"
           @bind-PageIndex="_pageIndex"
           @bind-PageSize="_pageSize"
           @bind-SelectedRows="selectedRows"
    >
        <PropertyColumn Width="100" Property="c=>c.Id" Sortable />
        <PropertyColumn   Property="c=>c.Title" Sortable />
        <ActionColumn Width="240"  Title="Action">
            <Space>
                <SpaceItem><Button  Type="@ButtonType.Primary" OnClick="()=>Edit(context.Id)">  Edit  </Button></SpaceItem>
                <SpaceItem><Button  Type="@ButtonType.Primary" OnClick="()=>View(context.Id)">  View  </Button></SpaceItem>
                <SpaceItem><Button Danger OnClick="() => Delete(context.Id)">Delete</Button></SpaceItem>
            </Space>
        </ActionColumn>
    </Table>
</Card>


@code {
    IEnumerable<Report> reports;

    IEnumerable<Report> selectedRows;
   
    ITable table;

    int _pageIndex = 1;
    int _pageSize = 10;
    int _total = 0;

    protected override async Task OnInitializedAsync()
    {
        reports = await new swaggerClient("https://localhost:7103/", new HttpClient()).ReportsAllAsync();
        _total = reports.Count();
    }
    
    private void Edit(int id)
    {
        Navigation.NavigateTo($@"reports/{id}");
    }

    private void View(int id)
    {
        Navigation.NavigateTo($@"reports/{id}/view");
    }

    private async Task Delete(int id)
    {
        await new swaggerClient("https://localhost:7103/", new HttpClient()).Reports4Async(id);
        reports = await new swaggerClient("https://localhost:7103/", new HttpClient()).ReportsAllAsync();
        _total = reports.Count();
    }
    #region original form coding
   

    private Report model = new Report();

    private  void OnFinishFailed(EditContext editContext)
    {
        toggle(false);
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(model)}");
    }

    bool loading = false;

    void toggle(bool value) => loading = value;

    #endregion

    #region original modal coding

    bool _visible = false;

    private void ShowModal()
    {
        _visible = true;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        toggle(false);
        Console.WriteLine("e");
        _visible = false;
    }

    #endregion

    /*
     * Careful!
     *
     * next bind submit event to modal OK button
     */

    private Form<Report> _form;

    /// <summary>
    /// when form is submited, close the modal
    /// </summary>
    /// <param name="args"></param>
    private async Task OnFinish(EditContext editContext)
    {
        toggle(false);
        reports = await new swaggerClient("https://localhost:7103/", new HttpClient()).ReportsAllAsync();
        _total = reports.Count();
        _visible = false;
    }

    /// <summary>
    /// on modal OK button is click, submit form manually
    /// </summary>
    /// <param name="e"></param>
    private async Task HandleOk(MouseEventArgs e)
    {
        toggle(true);
        var m = await new swaggerClient("https://localhost:7103/", new HttpClient()).ReportsAsync(model);
        
        _form.Submit();
    }
}